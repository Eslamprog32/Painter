package painter;


import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Amr
 */
public class PropertiesPanel extends javax.swing.JPanel {

    private Map<String, Property> allProperties;
    private Vector<String> columnNames;
    private DefaultTableModel tableModel;
    private XJTable table;

    /**
     * Creates new form PropertiesPanel
     */
    public PropertiesPanel() {
        initComponents();
        allProperties = new HashMap<>();
        propertyListeners = new ArrayList<>();
        columnNames = new Vector<>();
        columnNames.add("Property");
        columnNames.add("Value");
        tableModel = new DefaultTableModel(columnNames, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 0) {
                    return false;
                }
                return true;
            }
        };
        table = new XJTable(tableModel);
        table.getTableHeader().setReorderingAllowed(false);
        table.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("tableCellEditor".equals(evt.getPropertyName())) {
                    if (table.isEditing()) {
                        
                    } else {
                        int r = table.getEditingRow();
                        int c = table.getEditingColumn();
                        Object propVal = table.getValueAt(r, c);
                        String propName = (String) (table.getValueAt(r, c - 1));
                        for (PropertyListener p : propertyListeners) {
                            p.onPropertyChange(propName, propVal);
                        }
                    }
                }
            }
        });
        propertyListeners = new ArrayList<>();
        JScrollPane scrollPane = new JScrollPane(table);
        this.add(scrollPane, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(0, 2));
        jScrollPane1.setViewportView(jPanel1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private class Property {

        String name;
        Class type;
        Object value;
    }

    public static interface PropertyListener {

        public void onPropertyChange(String propName, Object newValue);
    };
    private ArrayList<PropertyListener> propertyListeners;

    public void addPropertyListener(PropertyListener propertyListener) {
        this.propertyListeners.add(propertyListener);
    }

    public void removePropertyListener(PropertyListener propertyListener) {
        this.propertyListeners.remove(propertyListener);
    }

    public void removeProperties(){
        tableModel.setRowCount(0);
    }
    public void addProperty(String name, Class type, Object value) {
        Property p = new Property();
        p.name = name;
        p.type = type;
        p.value = value;

        //dataTable.addElement(p);
        tableModel.addRow(new Object[]{name, value});
    }

    class XJTable extends JTable {

        XJTable(TableModel model) {
            super(model);
        }

        @Override
        public TableCellEditor getCellEditor(int row, int column) {
            Object value = super.getValueAt(row, column);
            if (true) {
                return getDefaultEditor(value.getClass());
            }
            if (value instanceof Boolean) {
                return getDefaultEditor(Boolean.class);
            }
            if (value instanceof Date) {
                return getDefaultEditor(Date.class);
            }
            if (value instanceof Integer) {
                return getDefaultEditor(Integer.class);
            }
            if (value instanceof String) {
                return getDefaultEditor(String.class);
            }
            // no special case  
            return super.getCellEditor(row, column);
        }

        @Override
        public TableCellRenderer getCellRenderer(int row, int column) {
            
            Object value = super.getValueAt(row, column);
            if (true) {
                return getDefaultRenderer(value.getClass());
            }
            if (value instanceof Boolean) {
                return getDefaultRenderer(Boolean.class);
            }
            if (value instanceof Date) {
                return getDefaultRenderer(Date.class);
            }
            if (value instanceof Integer) {
                return getDefaultRenderer(Integer.class);
            }

            if (value instanceof String) {
                return getDefaultRenderer(String.class);
            }
            // no special case  
            return super.getCellRenderer(row, column);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
